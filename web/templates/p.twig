{% block content %}

{# Conteneur principal pour aligner les personnes #}
<div class="d-flex flex-wrap justify-content-center align-items-start gap-3">
    {# Boucle sur chaque personne inscrite dans le groupe #}
    {% for gens in groupe.gensinscrit %}
        {# Bloc pour une personne (image + nom) #}
        <div class="text-center border-danger" style="width: 80px;"> {# Largeur fixe pour contrôler l'espacement #}

            {# Récupération de l'image #}
            {% set image = gens.img.one() %}

            {# Condition pour afficher l'image ou le placeholder #}
            {% if image %}
                {# Affichage de l'image en bulle #}
                <img src="{{ image.getUrl({width: 120, height: 120, mode: 'crop', quality: 80}) }}" {# Taille source un peu plus grande #}
                     alt="Photo de {{ gens.title }}" {# Texte alternatif descriptif #}
                     class="rounded-circle shadow-sm mb-1 mx-auto d-block" {# Bulle + Ombre légère + Marge en bas + Centrage #}
                     style="width: 60px; height: 60px; object-fit: cover; background-color: #f8f9fa;" {# Taille fixe + Remplissage + Fond clair si image transparente #}
                     loading="lazy"> {# Chargement différé pour les images #}
            {% else %}
                {# Placeholder si pas d'image : icône dans un cercle #}
                <div class="rounded-circle bg-secondary text-white d-flex align-items-center justify-content-center shadow-sm mb-1 mx-auto"
                     style="width: 60px; height: 60px;"
                     title="Pas d'image pour {{ gens.title }}"> {# Tooltip indiquant l'absence d'image #}
                     {# Icône Bootstrap (Personne) #}
                     <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" fill="currentColor" class="bi bi-person-fill" viewBox="0 0 16 16">
                        <path d="M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1H3zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
                     </svg>
                </div>
            {% endif %}

            {# Affichage du nom sous la bulle #}
            <p class="mb-0 small" style="line-height: 1.2; overflow-wrap: break-word;"> {# Texte petit, marge bas nulle, hauteur de ligne réduite, gestion des mots longs #}
                {{ gens.title }}
            </p>

        </div> {# Fin du bloc pour une personne #}

    {% else %}
        {# Message si aucune personne n'est inscrite #}
        <p class="text-muted fst-italic">Aucune personne inscrite dans ce groupe pour le moment.</p>

    {% endfor %} {# Fin de la boucle sur les personnes #}

</div> {# Fin du conteneur principal #}


<form method="post" accept-charset="UTF-8" enctype="multipart/form-data">
    {{ csrfInput() }} {# Important pour la sécurité CSRF #}
    {# {{ actionInpust('guest-entries/save') }} #}
    {{ actionInput('entries/save-entry') }}
    {{ hiddenInput('enabled', '1') }}
    {{ hiddenInput('sectionId', 12) }}
    {{ hiddenInput('entryId', groupe.id) }}


    {# 1. Ajouter des champs cachés pour TOUS les gens DÉJÀ liés #}
    {% if groupe.gensinscrit is defined and groupe.gensinscrit.exists() %}
        {% for existingPerson in groupe.gensinscrit.all() %}
            <input type="hidden" name="fields[gensinscrit][]" value="{{ existingPerson.id }}">
        {% endfor %}
    {% endif %}

    {# <input type="hidden" name="title" value="{{groupe.title}}"> #}

    <input placeholder="Rechercher un user" class="form-control sea" />


    {# Champs du deuxième formulaire #}
    {# {{ hiddenInput('entryId', pilote.id) }} #}
    {# <input type="hidden" name="title" value="{{ pilote.title ?? null }}"> #}
    {# <input type="hidden" name="fields[gens][]" value="{{ user.id }}"> #}
    {# <input type="hidden" id="recois_id_pilote" name="fields[pilotes][]"> #}
    <select id="recois_id_pilote" name="fields[gensinscrit][]" required>
    </select>


    {# <input type="hidden" name="slug" value="{{ voiture.title ?? null }}"> #}
    {# {{ hiddenInput('entryId', user.id) }} #}
    {# <input type="hidden" name="fields[pilotes][]" value="{{ pilote.id ?? null }}"> #}
    {# <input type="hidden" name="fields[gens][0][pilotes][]" value="{{ pilote.id ?? null }}"> #}
    <input type="submit" value="Inviter un user dans l'agenda">
</form>     


<script>
        document.addEventListener('DOMContentLoaded', function() {
    const searchInputs = document.querySelectorAll('.sea'); // Sélectionner TOUS les inputs avec l'ID 'sea'

    searchInputs.forEach(searchInput => { // Ajouter un écouteur d'événements à chaque input
        searchInput.addEventListener('input', function() {
            const query = this.value; // 'this' fait référence à l'input 'sea' actuel
            if (query.length < 1) {return}; // Ne pas effectuer la recherche si moins de 3 caractères{
                
            const form = this.closest('form'); // Remonter dans le DOM pour trouver le formulaire parent le plus proche
            const resultContainer = form.querySelector('#recois_id_pilote'); // Sélectionner le select DANS ce formulaire

            // Effectuer une requête AJAX pour récupérer les résultats de recherche
            fetch('/index.php?action=graphql/api', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    query: `
                        query MyQuery {
                            gensEntries(search: "${query}" , limit:9) {
                                ... on gens_Entry {
                                id
                                title
                                }
                            }
                        }

                    `
                })
            })
            .then(response => response.json())
            .then(data => {
                // console.log(data); // Afficher la réponse dans la console pour le débogage
                
                // Traiter les résultats de la recherche et mettre à jour le conteneur de résultats
                const results = data.data.gensEntries;
                resultContainer.innerHTML = ''; // Vider le conteneur avant d'ajouter les nouveaux résultats

                results.forEach(entry => {
                    const option = document.createElement('option');
                    option.value = entry.id; // ID du pilote
                    option.textContent = entry.title; // Nom du pilote
                    resultContainer.appendChild(option);
                });
            })
            .catch(error => console.error('Erreur lors de la recherche :', error));
        });
    });
});
</script>

{% endblock %}